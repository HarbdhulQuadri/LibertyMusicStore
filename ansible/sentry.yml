- hosts: all

#
# Setup Sentry running on HTTPS protected Nginx web server, PostgreSQL database
#

  roles:
  - postfix_mandrill
  - ANXS.postgresql
  - Stouts.foundation
  - Stouts.nginx
  - Stouts.sentry

  vars:

    # Mandrill
    # see vault.yml
    postfix_domain: "libertymusicstore.net"

    # Basic settings
    postgresql_version: 9.3
    postgresql_encoding: 'UTF-8'
    postgresql_locale: 'en_US.UTF-8'

    postgresql_admin_user: "postgres"
    postgresql_default_auth_method: "trust"

    postgresql_cluster_name: "main"
    postgresql_cluster_reset: false

    # List of databases to be created (optional)
    postgresql_databases:
      - name: ansible
        hstore: yes         # flag to install the hstore extension on this database (yes/no)
        uuid_ossp: yes      # flag to install the uuid-ossp extension on this database (yes/no)

    # List of users to be created (optional)
    postgresql_users:
      - name: ansible
        pass: ansible
        encrypted: no       # denotes if the password is already encrypted.

    # List of user privileges to be applied (optional)
    postgresql_user_privileges:
      - name: ansible                   # user name
        db: ansible                  # database
        priv: "ALL"                 # privilege string format: example: INSERT,UPDATE/table:SELECT/anothertable:ALL
        role_attr_flags: "CREATEDB" # role attribute flags

    nginx_servers:
    - |
        server {
            server_name sentry.libertymusicstore.net;
            listen 443;

            ssl on;
            ssl_certificate /etc/ssl/certs/server.crt;
            ssl_certificate_key /etc/ssl/certs/server.key;

            # https://wiki.mozilla.org/Security/Server_Side_TLS
            # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
            # ssl_dhparam /path/to/dhparam.pem;
            ssl_session_timeout 5m;
            ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
            ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK';
            ssl_prefer_server_ciphers on;
            ssl_session_cache shared:SSL:50m;

        location / {
          proxy_pass         http://localhost:9000;
          proxy_redirect     off;

          proxy_set_header   Host              $host;
          proxy_set_header   X-Real-IP         $remote_addr;
          proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Proto $scheme;
        }

    # Sentry instance

    sentry_enabled: yes                                       # Enable the role
    sentry_version: 7.1.4
    sentry_home: /home/sentry/sentry                              # Deploy sentry to the folder
    sentry_user: sentry                                       # Run as user
    sentry_hostname: "{{inventory_hostname}}"
    sentry_port: 80
    sentry_https_url: yes
    # in vault
    # sentry_secret_key: x
    sentry_extensions: []                                     # List of sentry-extensions

    # Initial data
    sentry_admin_username: admin                              # Creates admin user with credentials, set blank for skip
    sentry_admin_email: mikko@libertymusicstore.net
    # in vault
    # sentry_admin_password: x
    sentry_teams: [sentry]                                    # Creates teams for admin user, set blank for skip
    sentry_projects:                                          # Creates project for admin user, set blank for skip
    - name: tatianastore
      platform: python
      team: sentry

    sentry_config_additional: []                              # List of additional options

    # Setup gunicorn
    sentry_web_host: 127.0.0.1
    sentry_web_port: 9000
    sentry_web_options: { workers: 3, limit_request_line: 0, secure_scheme_headers: {'X-FORWARDED-PROTO': 'https'} }

    # Setup databases
    sentry_db_engine: django.db.backends.sqlite3
    sentry_db_name: "sentry"
    sentry_db_user: postgres
    sentry_db_password: ""
    sentry_db_host: ""
    sentry_db_port: ""
    sentry_db_options: {}

    # Setup cache
    sentry_cache_backend: "redis_cache.RedisCache"
    sentry_cache_location: "{{redis_bind}}:{{redis_port}}"

    # Queue settings
    sentry_broker_url: "redis://{{redis_bind}}:{{redis_port}}"

    # Buffer settings
    sentry_buffer: "sentry.buffer.redis.RedisBuffer"
    sentry_redis_host: "{{redis_bind}}"
    sentry_redis_port: "{{redis_port}}"

    # Use local Postfix for email
    sentry_server_email: 'sentry@libertymusicstore.net'         # From email
    sentry_email_settings:
        - EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
        - EMAIL_HOST: 'localhost'
        - EMAIL_PORT: 25
        - EMAIL_HOST_USER: ''
        - EMAI_HOST_PASSWORD: ''

    # Logging
    sentry_access_log: /var/sentry.access.log
    sentry_error_log: /var/sentry.error.log

    # The following parameters are for toggling dependencies
    redis_enabled: yes
    nginx_enabled: yes
    python_enabled: yes
